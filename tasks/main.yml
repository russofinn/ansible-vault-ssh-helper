---
# tasks file for vault-ssh-helper

- name: Verificar as veriaveis necessárias
  fail:
    msg: "Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items: "{{ required_vars }}"

- name: Verificar acessibilidade do Vault e se ele está selado
  uri:
    url: "{{ vault_addr }}/v1/sys/seal-status"
    validate_certs: no
    method: GET
    body_format: json
    return_content: yes
  register: vault_seal_status

- name: Falha se o servidor do Vault não estiver disponível
  fail:
    msg: "O servidor do Vault está selado ou não disponível"
  when: vault_seal_status.json.sealed

- name: Instala os pacotes necessários
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - unzip
    - jq
    - curl

- name: Define o link para download baseado na arquitetura
  block:
  - name: "Download baseado na arquitetura (x86_64 or amd64)"
    when: ansible_architecture == "x86_64" or ansible_architecture == "amd64"
    set_fact:
      download_url: https://releases.hashicorp.com/vault-ssh-helper/{{ vault_ssh_helper_version }}/vault-ssh-helper_{{ vault_ssh_helper_version }}_linux_amd64.zip
  - name: "Download baseado na arquitetura (aarch64 or arm)"
    when: ansible_architecture == "aarch64" or (ansible_architecture.find("arm") != -1)
    set_fact:
      download_url: https://releases.hashicorp.com/vault-ssh-helper/{{ vault_ssh_helper_version }}/vault-ssh-helper_{{ vault_ssh_helper_version }}_linux_arm.zip

- name:
  unarchive:
    src: "{{ download_url }}"
    dest: /usr/local/bin
    remote_src: yes
    owner: root
    group: root
    mode: '0755'
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Crie um novo diretorio para as configurações do vault-ssh-helper
  file:
    path: "/etc/vault-ssh-helper.d"
    state: directory

- name: Copie o arquivo de configuração do vault-ssh-helper
  template:
    src: config.hcl
    dest: /etc/vault-ssh-helper.d/config.hcl

- name: Verifica as configurações do vault-ssh-helper
  command: "/usr/local/bin/vault-ssh-helper -dev -verify-only -config=/etc/vault-ssh-helper.d/config.hcl"
  register: verify_vault_ssh_helper
  changed_when: False

- debug:
    msg: "{{ verify_vault_ssh_helper.stderr }}"

- name: Falha a automação se as configurações estiverem incorretas
  fail:
    msg: "A configuração falhou"
  when: "'successful' not in verify_vault_ssh_helper.stderr"

- name: Inclui as alterações no PAM baseado na familia do Linux
  include_tasks: "{{ ansible_os_family | lower }}_pam.yml"

- name: Inclui as alterações sshd_config
  include_tasks: sshd.yml

- name: Inclui módulos do SELinux apenas para familia RedHat que possui SELinux no modo enforcing
  include_tasks: selinux.yml
  when: ansible_os_family == "RedHat" and (ansible_selinux.config_mode is defined and ansible_selinux.config_mode == 'enforcing')

- debug:
    msg: "SELinux is not enabled. We strongly recommend enabling"
  when: ansible_os_family == "RedHat" and (ansible_selinux.config_mode is not defined or ansible_selinux.config_mode == 'disabled')

- name: Inclui a criação dos usuários baseado na familia do Linux
  include_tasks: "{{ ansible_os_family | lower }}_users.yml"

- name: Adiciona o usuário padrão a executar qualquer comandos como root (sem senha)
  community.general.sudoers:
    name: "{{ item }}"
    state: present
    user: "{{ item }}"
    runas: ALL
    commands: ALL
    nopassword: yes
  with_items:
    - "{{ default_linux_user }}"
    - "ansible"

- name: Inclui os scripts para realizar o rotate local das senhas
  include_tasks: rotate.yml
  when: rotate_local_password | bool